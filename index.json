[{"authors":["admin"],"categories":null,"content":"東京工業大学 工学院情報通信系在籍(ベラール研究室にてデータサイエンスを専攻)\n大学１年の終わり頃に、プログラミング学習を始めすぐ、株式会社エブリーでReactとgolangを用いて、「DELISH KITCHEN」「MAMADAYS」のWebフロントやバックエンドの開発職インターンに参加。\n数ヶ月後には、株式会社Journeyにジョインし、データ分析チームを立ち上げる。後払いサービスの不正検知プロジェクトにおいて、MLモデルを構築。 また、DWHの構築から、継続的再学習、データ基盤の３分類などを導入したクラウドコンピューティングを構築。\n大学２年の終わり頃から一年弱、株式会社TechDesignでは経営メンバーの一員として、最高技術責任者(CTO)を担った。新規事業を企画立案し、その事業においてチームマネジメント、サービスリード、テックリードを担当。\nその後、株式会社ミクシィの開発本部CTO室にて、大人気ゲーム「モンスターストライク」の正月イベント周りのSREを担当。\n 最新の技術を使って、今の価値観を取り壊し、これからの常識に変えていく。 世の中の情報通信技術の進歩に大きく貢献する。 全員が主体的に楽しく仕事をするような世の中を作りたい。  という３つの大きな目標を掲げています。\nI am a student at Tokyo Institute of Technology and major in computer science. (I\u0026rsquo;m in the Dr. Daniel Berrar Lab and study data science.)\nI started learning programming at the end of my first year of university.\nImmediately after that, I started working as a software engineer intern at \u0026ldquo;every inc.\u0026rdquo; There, I was member of the development team of a very popular recipe app \u0026ldquo;DELISH KITCHEN\u0026rdquo;.\nA few months later, I joined Journey Inc. and started the data analysis team.\nAs the head of the team, I made ML models for a fraud detection project. I also made a DWH, continuous learning platform and Data Pipeline using GCP.\nFor a little less than a year, starting in the middle of my second year of university, I was the Chief Technology Officer(CTO) at TechDesign Inc. as a member of the executive team. I planned and developed a new business and was responsible for team management, service lead, and tech lead in that business.\nAfter that, I joined the CTO Office at Mixi Inc. and is a reliability engineer to support the New Year\u0026rsquo;s event of the very popular game \u0026ldquo;Monster Strike\u0026rdquo;.\nこれまでの開発経験を列挙する。\nI have the following skills.\nSkills  Web\nReact(Atomic Design), golang(echo, DDD), Ruby(Rails) Infra\nKubernetes, MySQL(sharding, replication, tuning), Redis, worker-pool Database\nMySQL, Postgres DevOps\nCI(cloudbuild, circleCI, actions), CD(Spinnaker), Infra as Code(Terraform, Dockerfile, kustomise) MLOps\njupyter, papermill, airflow(cloud compsoer), DWH, flask(pandas-gbq), Dataproc, Datapipeline Collect Data\nfluentd, stackdriver, Pub/Sub, Dataflow(streaming), BigQuery Data processing\nSQL(BigQuery), pandas, spark(python), feature-tool(python) MLModel\ntable(scikit-learn, light gbm, BigQueryML, Spark), Vision(CNN, VGG, resnet), NLP(mecab, Word2Vec) Business\nManager, MRD, PRD, Resourceful, SEO, GDN, KPI, OKR  Affiliation  東京工業大学工学院情報通信系 ダニエル・ベラール研究室(Data Science Laboratory) 工大祭実行委員会 渉内局(retired) 学生エンジニア団体Volare 東大起業サークルTNK  Philosophy 主体的な姿勢であること\n成果を出すために取り組んでいること\nExtra Activities publish OSS cynthia made by golang.\nCynthia ensures test-driven development.\nWhen you use it in CI, it ensures that untested methods are not introduced.\nThe reason for this is that Cynthia alerts you to a function that has no tests.\nテストのない関数を警告してくれます。CIやreviewdogに組み込むことでTDDを徹底できます。\\\ncheck_interface made by golang.\ncheck_interface warns against interfaces that are not implemented.\nInterfaces that are not implemented in any method are the cause of the nill pointer exception.\nどのメソッドにも実装されていないインターフェイスに警告を出します。\nそれによって起こる実行時エラーを防ぎます。\\\nmozuku made by golang. Mozuku returns a thesaurus of the received words. Mozuku is an OSS for natural language processing. It is useful when you want to compensate for similar words and notational distortions. 受け取った単語の類似語やひらがな表記などを返してくれる自然言語処理のためのシソーラスOSSです。\n","date":1609406379,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1609406379,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://riita10069.me/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"東京工業大学 工学院情報通信系在籍(ベラール研究室にてデータサイエンスを専攻)\n大学１年の終わり頃に、プログラミング学習を始めすぐ、株式会社エブリーでReactとgolangを用いて、「DELISH KITCHEN」「MAMADAYS」のWebフロントやバックエンドの開発職インターンに参加。\n数ヶ月後には、株式会社Journeyにジョインし、データ分析チームを立ち上げる。後払いサービスの不正検知プロジェクトにおいて、MLモデルを構築。 また、DWHの構築から、継続的再学習、データ基盤の３分類などを導入したクラウドコンピューティングを構築。\n大学２年の終わり頃から一年弱、株式会社TechDesignでは経営メンバーの一員として、最高技術責任者(CTO)を担った。新規事業を企画立案し、その事業においてチームマネジメント、サービスリード、テックリードを担当。\nその後、株式会社ミクシィの開発本部CTO室にて、大人気ゲーム「モンスターストライク」の正月イベント周りのSREを担当。\n 最新の技術を使って、今の価値観を取り壊し、これからの常識に変えていく。 世の中の情報通信技術の進歩に大きく貢献する。 全員が主体的に楽しく仕事をするような世の中を作りたい。  という３つの大きな目標を掲げています。\nI am a student at Tokyo Institute of Technology and major in computer science. (I\u0026rsquo;m in the Dr. Daniel Berrar Lab and study data science.)\nI started learning programming at the end of my first year of university.\nImmediately after that, I started working as a software engineer intern at \u0026ldquo;every inc.\u0026rdquo; There, I was member of the development team of a very popular recipe app \u0026ldquo;DELISH KITCHEN\u0026rdquo;.","tags":null,"title":"Ryota Yamada","type":"authors"},{"authors":["Ryota Yamada"],"categories":["主体性"],"content":"はじめに 　あなたは組織に所属したことがあるだろうか。どの組織にも、所属したことがないということはないだろう。組織というのはとても身近な存在であるからだ。大学生ならサークルや研究室に所属しているだろう、アルバイトをしていればそこも組織である。社会人であれば、働いている企業にも多くの組織があるのだ。ところが、多くの者が組織について深く考えたことはないだろう。私が「組織というのは何か」について真剣に考えるようになったのは、大学入学後に工大祭実行委員会に所属し、組織として成果を求められるようになってからである。その後、私はある事業会社へ最高技術責任者、すなわちCTOとして抜擢され、ゼロから新規事業を構想し、１０人以上の開発組織も作り上げた。これらの経験では、良い組織とはなんであるかについて深く考えさせられた。\n　一般に、１つの組織にはその大きさにかかわらず、１人の役職上のリーダーが存在する。さきほど述べたように、私は１つの事業会社において役職上のリーダーであったわけだ。サークルには代表がいるし、研究室には教授がいる。世の中の組織というのは、このような構図で機能しているわけだ。この構図においてリーダーとそうでない人(以下、メンバー)の割合はメンバーの方が圧倒的に多い割合となる。これは非常に一般的な話だ。\n　ここから、リーダーの仕事はメンバーとどう違うのか、リーダーシップとはどのようなスキルであるのか。について述べよう。まず、組織というのは、組織自体のためにあるわけではない。組織が機能することによって、社会全体に対して貢献するためにある。そのためリーダーは「その組織の持つ機能は何か」に注目すべきである。そして、その組織に特有の使命を果たすことに責任を持つことこそがリーダーシップというスキルの１つである。特に日本においてはこれができている人が非常に少ない。多くの人が組織としてやるべきことは何かではなく、自分個人としての成果を最大化することに焦点を当てている。自分が出世すれば会社が儲かるかどうかは重要ではないというような考え方は典型的なリーダーシップというスキルを持ち合わせていない人の考え方である。その組織に特有の使命とは何か、それを果たすことを最終目標に置いていることをリーダーの前提条件としてください。２つ目のリーダーの仕事は、仕事を通じてメンバーを活かすことである。活かすというのは、抽象的に感じるだろう。具体的に述べれば、人間的および技術的な成長を提供し、働くことが楽しいと感じられるようにすることだ。多くの場合、人間というのは、所属する組織によって、社会的な地位、コミュニティを得ることになるので、その組織は人生の中心となる。特に仕事において顕著である。そのため、そこで働く人を活かすことというのは、組織を構築する上で最も大切なことである。３つ目は、最終的に決断することだ。日本においては意思決定をコンセンサスにおいて行うというような文化が見受けられる。多数決といった手法はそれに近い。しかし、本来の意思決定はそれではない。意思決定とは、答えを得るためのアプローチであるべきなのだ。言い換えると、前提としてリーダーに求められる決断というのは成果主義であるべきであるということだ。成果主義というのは、それまでの過程や努力以上に、成果を重視する考え方であり、その環境においてのみリーダーの３つ目の責務として決断が発生する。簡単な具体例を考えよう。君のユニットクラス(東工大における１年生が所属するクラス)で工大祭に模擬店を出店することを考える。最初にクラスのメンバーは何を出店したいか集まって話すだろう。ここで重要なのはそのクラスが持っている目的だ。2種類のパターンが考えられ、「利益額をKGIとして設定し、それで豪華な打ち上げをしようとしている。」もしくは、「お祭りだから全員が楽しければそれでいい」の２つに１つになるだろう。前者であれば、様々な案は、どのくらいの費用がかかり、どのくらいの集客が見込めるのか。客単価はいくらなのかといったことが論点となって議論が交わされるだろう。そして議論の結果誰かがリーダーシップを発揮して、決断をするだろう。ところが後者であれば、多数決や場の雰囲気で決めれば良いので、誰かがリーダーシップを発揮して決断する必要はないのだ。こうなると大きく話が変わってくる。もっと言えば、前者のような成果主義の組織では、１０人中９人が焼きそばがやりたかったとしても、「タピオカの方が楽にたくさんの人が買うのではないか。利益率も高いので、もう一度去年の売り上げからタピオカが売れる数を推定して、比較検討しよう。」と声を上げていうべきなのである。それこそがリーダーシップなのである。そしてリーダーシップとはここで終わらない。「客単価と見込み客数を手分けして調査しよう」「より安い仕入先がないかさらに調べてみよう」「天気によってはタピオカは売れないのではないか」など、さまざまな条件を考慮して次に行うべきアクションを提案していくスキルはリーダーシップであり、やはり成果主義の組織にのみ必要だ。日本においては、ビジネスの場でさえ、後者のような組織が少なくない。成果よりも組織の輪を優先するような考えだ。先ほどの例であれば、多くの日本企業のトップマネジメントは焼きそばを作ることに決める。全ての関係者に対して角が立たないように方向性を定めることは、本来の意思決定ではなく、そのような組織のリーダーは決断するという責務を放棄していて、リーダーとして不十分だ。そして4つ目の責務として、主体的に次のアクションを提案し、実行するというものがある。これも成果主義の組織においてのみ成り立つ。先ほどの例では、焼きそばで行くか、タピオカにするかを決断するために必要なファクトを集めることを提案するリーダーがいたようだ。彼のように次のアクションを提案するスキルは紛れもなくリーダーシップである。このような成果のための提案が、成果主義ではない社会では、自分の意見ばかり押し付けてくる強引な人と捉えられがちです。特に日本ではなぜか成果主義の組織が少ないので、そのように捉えられがちですが、社会で大きな成果を出すためには非常に重要なスキルであることは言うまでもない。また、よくあるリーダーへの批判として、指示ばかりして自分は何もしないということを聞く。指示ばかりして実行しないというのはリーダーではない。リーダーシップというスキルには、提案を組織の成果のために実行することも含まれている。誰に言われたわけでもないネクストアクションを生み出し、手と足を動かして実行するのがリーダーのやるべきことだ。多くのステークホルダーが絡むのであれば、自ら調整し説得して提案を実行することがリーダーには求められる。 少し話が長くなったが、リーダーシップというスキルは次の４つを持つ人と要約できる。\n その組織が果たす社会的な役割に着目し、組織としての成果を最優先するスキル 組織に所属する他のメンバー全員が、成長、活躍、楽しめるようにするスキル 組織としての成果を大きくするために、自らが最終的な決断を下すスキル 主体的に次のアクションを提案し、実行までリードしていくスキル  そして、私は組織というのはメンバー全員がリーダーのように振る舞うべき(すなわち上記の４つのスキルを身につけ発揮する)ということを次項以降を使って述べたい。\nなぜ、それほどリーダーシップが重要なのか 　私は常々、思考力や技術力によって、戦略を決定することの重要性だけでなく、リーダーシップを発揮することによって、戦略を実行することの重要性について述べている。企業価値を高めていくために、経営者だけでなく、すべての従業員が課題を模索し、解決策を検討する段階から組織の中で有機的に働き、様々なステークホルダーと調和しながらボトムアップ的な意思決定をしていく必要がある。これは、成果主義の事業会社でCTOというトップマネジメントをしていた時に感じたことだ。\n　具体例を交えて説明しよう。君が普段の業務に関して、既存のやり方を否定して新たなやり方を提案したいとしよう。その手法によって大きな問題が解決のだ。しかし、どんなにその新しい手法によっていいことがあるからといって、それをすぐに導入しようとはならない。それでは、本当にいい結果が得られるかわからないし、そのやり方にもどこかデメリットがあるかもしれないのだ。それに、君の考える解決策の他にももっと良い方法があるかもしれない。その時に、君がやるべきことは、力づくであなたの意見を通すことではないだろう。これは誰にだってわかることだ。まずは、君の提案において、関わりのある様々な部署の人とコミュニケーションをとり、どのような変化が生じるかについて深く検討しなければならない。なにか新しいことを始めれば、必ず多くの批判を受ける。それでも、あなたは様々な部署のルーチンを阻害しないようなより良いやり方を考えることをしなければならない。そして、最終的に既存のやり方を変えることができるかどうかは、あなたへの信頼とあなたの人を巻き込む力にかかっている。多くのステークホルダーを巻き込むことでより俯瞰的かつ包括的な、良い提案をすることができるようになるだろう。その結果として、多くの人の信頼も集められるようになる。そうなって、初めてこれまでの常識は変えられる。この時点で、最終的に何かを変えることができるのは、どんな分野であれ、思考力や技術力ではなく、リーダーシップであることにお気づきだろうか。\n　まだ腑に落ちない人のために、もっと具体的な話をしよう。あなたの会社もしくは研究室のゴミ箱の分別がされていないから、みんなに分別をしてほしいと思ったとしよう。この時、紙と鉛筆を用意して、完璧な解決策を考えるだろうか。例えば、あるごみは燃えるゴミであるが、これは洗ってから燃えないゴミにすることができるとか。そういったことを書き出すだろうか。もちろん、それも重要だ。分別の仕方がわからないのでは、分別ができるわけがないのだから。しかし、それではおそらく問題は解決しないだろう。本質的にあなたが他のメンバーを巻き込むことができないとあくまでも解決策で終わってしまうのだ。つまり、どんなに、あなたが完璧にゴミの分別の方法を知っていても、この問題は解決しない。ここで、必要なのはリーダーシップなのだ。あなたが周りの人を巻き込んで、ゴミを分別するように行動を変えさせることが必要となっている。\n　これは、技術職においても変わらない。私のようなソフトウェアエンジニアが、大規模なシステムの変更が必要な場合を想像してみる。技術スキルの高い優秀なエンジニアがいれば、実装の構成やパフォーマンスにおける課題などは事前に見つかるかもしれない。ところが、それはあくまでも机上の空論にすぎない。実際にシステムを変更するには、その素晴らしい設計をプログラムコードとして実装しなければならない。実際のところ、大規模システムにおいて、既存のプログラムコードやアーキテクトの全てを把握している人は、1人もいないのだ。1000人規模のエンジニアが集まって、効果的に協力し合わなければプロジェクトは進まない、結局ここで全員のリーダーシップが必要になってくるのだ。技術だけでは、課題は解決しない。最終的に課題を解決するのは、その技術を実行するリーダーシップなのだ。\n　「みんなが有機的に協調すれば解決できるが、一人一人では解決できない課題」というのが世の中には溢れかえっているからこそ、リーダーシップというスキルを持っていて、さらに、役職上のリーダーでなくとも、リーダーシップを発揮できる人は大きな成果を上げるために必要不可欠であるということだ。\nリーダーシップは全員に必要 　よくある間違った考え方に、「リーダーとは一つの組織に一人か二人いればいい」という意見がある。社会人であっても、リーダーシップを問われたことはない。言われたことを淡々とこなすことだけを求められてきたという人も少なくない。それでいて、彼らは「言われたことをしっかりやると人生うまくいく」という大きな勘違いをしている。小学校から始まって、大学受験まで、「誰かが作った一つに決まっている答えをいかに効率よく解けるか」を競うような性質のものが教育であるから、仕事においてもそうだと思ってしまっているのかもしれない。実際は、実際の社会ではそれは全くの真逆になる。誰かの作ったテストで100点満点をとれる人に価値があるのは、高校生までであり、社会では役に立たない。社会で価値のある人というのは、自らまだ答えの出ていない問いを立て、それに対して自分なりの答えを見つけ出せる人である。\n　ところが、勘違いをしている人たちは、リーダー以外の人は自分の主張を強くしてはならず、リーダーにやれと言われたことをやればいいとさえも思ってしまうのだ。このような考えは、さらに致命的な間違えである。\n　全員がリーダーシップを発揮する組織は、一人のリーダーがいる組織よりも圧倒的に大きな成果を出すことが出来ると私は声を大にして主張しよう。このような私の意見に対し、「船頭多くして船山に登る」というようなことであり、トラブルが起きるという反論をする者がいるので、それに対する私の回答を述べると、私のいうリーダーというのは、「チームとして成果を出すこと」を「自分の意見が採択されること」よりも重視している人を指している。(これは冒頭で述べた１つ目の責務に値する。)その前提において、リーダーが何人いようと、全員にとって海に出て魚を取ることがその組織に特有の責務であるので、どう転んでも船が山に登ることはない。その諺とその諺のように振舞っている組織は、「自分の意見が採択されること」に躍起になっている人ばかりが集まっている組織ということを示しているだけに過ぎない。\n　では、一人をリーダーにおくチームについて考えると、リーダー以外のメンバーというのは、フォロワーとして、言われたことをこなすだけになる。このような場合には、2種類のフォロワーが生まれるだろう。まず、チーム全体を率いることは自分の役割ではないと割り切り、自分の個人的な成果を大きくすることに意識が向いていくフォロワーだ。これでは、チームとしての成果は大きくならないし、その人のポテンシャルを十分発揮できず、ボトムアップ的な意思決定もできない。また、モチベーションの観点からいえば、リーダーシップを発揮しない人は、そもそも成果を出すことはリーダーの役割であり、成果への興味すらなくなる場合も多い。現実問題、私はただ指示に従い、結果に対する責任は全てリーダーのものである、自分の責任では一切ないと考えているような人をたくさん知っている。このような状態では、チームとしての成果は大きくならないし、多くのフォロワーは働いていて楽しいだろうか。\n　一方、私の考える全員がリーダーの組織について話す。私がある事業会社でCTOをしていたときには、私は役職上のリーダーであったわけだが、私の素晴らしいチームメンバーは全員がリーダーシップを発揮していた。役職上の責任者である私は最終的な顧客体験に対して、オーナーシップを発揮しています。 しかし、役職上の責任者とリーダシップというスキルは全く別のものだ。他のメンバーは役職がないからと言って、私の指示を待ち、与えられた業務を遂行するというのとは大きく異なっていた。彼らは、自分の関わるプロジェクトについて必要な実装や仕様について把握していて、どのように分担し進めていくかについて積極的に話し合いをした。話し合いにおいても、自分が合意形成をリードするという意思があり、話し合いで得られた結果だけにフォーカスする人はいない。\n　また逆に、上長である私ががどれだけある機能の必要性について説明しても、チームメンバーはそれを採用するかしないかについて主体的に自ら考えるのだ。採用されないことも多々あるが、「なぜこの意見を取りいれなかったのか」について聞き、その判断を批判したことは一度もない。なぜなら、私はメンバーに「決断のできるエンジニア」になってほしいからである。私は、どの技術や仕様を採用し、逆にどれを採用しないのか。それを一人一人のエンジニアが自分で考えて、動いて、意思決定することを求めた。つまり、一人一人のエンジニア自らが決められるだけの裁量を与え、決断しなければ前に進まないような状況をつくっていたのだ。\n　人は意思決定の数だけ成長していき、人の成長に合わせて組織も成長していく。だから、企業においてもっとも大切なことは全ての意思決定を最小化し、全てのメンバーが自身で考えて意思決定をしていくことであるという信念のもとに、あらゆる裁量を任せたのだ。この組織では、私では思いつかないような面白いアイデアがたくさん生み出され、非常に高速にデプロイが繰り返され、最先端の技術が次々に導入されていった。\n　大規模SaaSを3ヶ月でリリースし、信頼性、柔軟性、可観測性の高い疎結合なマイクロサービスアーキテクチャが実現した。運用フェーズでは、土日を含めても均して1日2回程度のデプロイ(サービスのバージョンアップ)が実行され、非常に高速な改善が実現された。10人程度のエンジニア組織では目覚ましい成果である。それでいて、私の開発メンバーは一人残らず全員が、最高に今が楽しいと言っていたのだ。もちろん私も例外ではない。最高に楽しい仕事だったと今振り返っても本当にそう思うのだ。\n　冒頭で述べた、リーダーの４つの責務を思い出してほしい。これらについて考えれば、全員がリーダーの組織を作ることが組織として最高の成果を上げることを証明できる。１つ目の、組織に特有の使命というのは、私たちの場合なんであろうか。私たちが開発組織である以上、技術的な負債を極限まで減らし、信頼性、柔軟性、可観測性の高い疎結合なマイクロサービスを高速に開発、改善することである。これは、明らかに高度な次元で達成されていた。また、会議やミーティングで開発組織の利益を最優先し合意形成をリードするような姿勢を感じられた。２つ目のメンバーを活かすことも達成できてた。人は意思決定の数だけ成長できるので、多くの意思決定の機会をメンバーは得ることになり、多くの成長の機会を手にしていた。そして、誰もが今振り返っても楽しかったと口を揃えていうような開発組織だったのだ。３つ目の決めることという責務を私は放棄したように感じるかもしれない。そのように感じているのならば、それは大きな間違いだ。冒頭でも述べたが、意思決定は合意を取るためにあるものではない。意思決定においての目的はあくまでも答えを得ることなのである。これにおいて、私はあるドメインにおいて最も知識を有するメンバーの決断を支持するという決断をしたのだ。特に開発組織においては手を動かして開発しているその技術に関して、私の考えを実行するというのはナンセンスである。答えに最も近づくことを優先することができるのは、メンバー全員が適切に意思決定する組織なのである。そして、そのようにすることに決めたのは紛れもなく役職上のリーダーである私であり、私は組織の成果のために決断するという責務を全うしているのだ。そして４つ目は、主体的に次のアクションを提案し、実行まで責任を持って遂行することだ。これも全てのメンバーが達成していた。さらに求められた以上の価値を提供する次元まで進んでいた。機能要件やユーザーの要望などをメンバーが直接組み上げ、プロダクトの改善に関するアイデアをボトムアップ的に生み出していた。仕事は与えられるものではなく、自分で作るもの。と私が繰り返していたため、新しいことをやりたいと言いやすい雰囲気を作ることに成功していた。\n　まず、これらのことからわかるのは、全員がリーダーシップを発揮する組織を作るリーダーは、組織の代表者として圧倒的な成果を残しているということである。そして、この組織の奇妙なことは、私だけではなく、メンバーもこの４つの条件を全て満たしていることだ。\n　つまり、冒頭で私が述べた４つの責務は、リーダーがだけ満たすべきものではなく、組織に所属する全員が満たすべき原則であるとここで強く主張しよう。\nリーダーシップを身につけるために必要なこと 　リーダーシップというスキルは役職上のリーダーであるかどうかに関わらず、全ての人にとって重要であることはご理解いただけただろう。であれば、すぐに先ほど述べた4つのスキルを身につけてほしいがそれは意外と難しいかもしれない。組織の成果のために何かすると言われても結局は、与えられた仕事をこなすような生活に戻ってしまう、自ら仕事を生み出すなんて難しい、と感じてしまうかもしれない。これから述べることについて意識することは、具体性が高く取り組みやすい。そして、これを続けていると、4つのリーダーシップというスキルを満たせるような状態になるのだ。\n　１つ目は「常にバリューを出すこと」である。バリューというのは直訳すれば付加価値です。仕事をしている相手に対して貢献をして、それを価値として受け取ってもらえた時にバリューが生まれる。ここで私が言いたいのは、些細なことでも会社に貢献するための価値を常に考えることが重要であるということだ。プレゼン資料１つとっても、その資料によって受け取り手の課題が解決しているかについて考える。上司を納得させるための資料ではなく、そのプロジェクトのための資料になっていてほしいと考えている。また、会議で発言しない人のバリューはゼロだ。私は出席した会議で発言を一切しないということはほとんどない。疑問に感じたところがあれば質問すれば良いし、他の提案があればすればいい。判断材料になるような自分の知っている知識は提供した方がいい。何も離さないでただ座っているだけだったとすれば、会議によって得られる結論はなんら変わらない。私はここで、当たり前のことしか言っていないが、実際の会議ではただ座っているだけの人が少なからずいる。彼らは会議を何かのセレモニーだと思っているのだろうか。会議は意思決定の場であるという認識を持つ必要がある。そして、そこに何かしらの貢献をすることは、あなたがいることで生まれる付加価値、すなわちバリューであると認識してほしい。\n　２つ目は、ポジションを取ることだ。私はエンジニアという職業をしているため、チームの誰も知らないことというのが業務上たくさん出てくる。私はいわゆるメガベンチャーと呼ばれるような企業で働いていて、チーム内で通信で使用する言語として新しいものを導入しようという動きがあった。実際に導入できるものであるのか、様々な観点から検証する必要があったので、「では、その通信の実装について調べてみます」と言って私はそれについて詳しく調べる担当となった。その言語の内部実装だけでなく、実際にどの程度通信が早くなるかなどの実験を繰り返し行いレポートを作成し、翌日の会議で提出し、それによるメリットとデメリットについて詳細に述べた。私は数千万人の顧客を抱える大規模プロジェクトに入ったばかりであり、他のキャリアの長いメンバーに遠慮してしまったため、ポジションを取ることができなかった。その時、チームメンバーに「それでなに？君は調査することが仕事なの？」と皮肉交じりに言われたことを鮮明に覚えてる。私はポジションを取るべきだったのだ。遠慮をする必要はなく、これは導入した方がいい。するべきではないというポジションをとり、自分の意見をはっきりと述べることがバリューである。成果主義の組織において問われるのは過程ではなく成果そのものであり、成果につながる結論を自ら導き出すことが求められている。それ以降、私が関わる全ての議題に対して、自分のポジションをとるようにしている。先輩エンジニアの意見の方が合理的であれば、ポジションを取り直せばいいのだ。\n　３つ目は、自分の仕事におけるリーダーは常に自分ということだ。自分が与えられた仕事というのは、チームメンバーの誰よりも自分が詳しいのだ。そう言った意味で、自信を持ってリーダーシップを発揮していけばいい。関係者が上司であれ、社長であれリーダーの自覚を持って成果をあげるのだ。一般的には自分が作った資料を上司がチェックすると考えられているような打ち合わせだとしても、そのように捉えていてはいつまでもリーダーシップは発揮できない。資料を作った本人である自分が、よりキャリアの長い上司にアドバイスをもらい改善するための打ち合わせと捉えるようにするべきだ。つまり、この資料については、最終的な決断をするのは自分であり、組織の利益を最大化するための手段として上司にアドバイスをもらっているということである。このような考え方を全員が持っている状態になったら、全員がリーダーの組織であり、この自分の仕事というのを明確化するための工夫を私はたくさんしていた。特にマイクロサービスアーキテクチャというものの導入が本質的であるが、ここで詳細は語らない。私がここで強調したいのは、ひとりひとりが自分の仕事に対しては自分が常にリーダーという自覚を持つことで、全員がリーダーのチームは作れるということだ。\nさいごに 　以前、主体的な姿勢であることは楽しいんだという記事を書いた。 そして、常に主体的に先のわからない挑戦を続けていくことは、もはや幸せそのものであるという結論付けまでした。 あれを書いたは、私が大学二年生の終わり頃、ちょうどプログラミングを初めて一年たった頃にアドベントカレンダーで書いたものだった。\n　それからちょうど1年が経つと思うと、少し早いと感じるかもしれない。でも、この一年で得たものは本当に大きかった。 初めて事業会社のCTOとして働いた。10人以上のエンジニアにとって最高に楽しくて、成長できる環境にしたい。 そして、企業としても成長確度を高めていきたいと考えて、双方を実現した組織がたまたま全員がリーダーの組織だったのだ。 でも、１つ目の記事を読んでいただければ、私が役職上のリーダーとして目標を掲げた時にそのような組織になることはもはや必然だったと感じられるかもしれない。 それは、役職上のリーダーの最大の仕事は、その組織の目標を掲げることであるからだ。\n　私は、これからもリーダーというポジションで多くの人にとって楽しくて成長できる環境を作っていきたいと考えているし、 それと同時にマイクロサービスアーキテクチャによるチームの分断とDevOpsの推進といった技術的な試みを続けていきたい。 マイクロサービスアーキテクチャは組織のためのアーキテクチャというだけでなく、DevOps、SRE、DDDといった技術を包括した運用のためのアーキテクチャであることも魅力的だ。 多くの自動化技術などによって、コミットからデプロイまでを道のりを最小化し、サイトの信頼性をあげることもできる。\n最後までご覧いただき、ありがとうございました。 次は、マイクロサービスアーキテクチャの技術的な投稿をしたいと思っています。\n","date":1609406379,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609406379,"objectID":"83e585bcfba1379936bde5fbd37c2541","permalink":"https://riita10069.me/post/the-best-leaders/","publishdate":"2020-12-31T18:19:39+09:00","relpermalink":"/post/the-best-leaders/","section":"post","summary":"すべてのエンジニアが自分で考え自分で動くそんな理想的な組織を作った。全員がリーダーの組織は、圧倒的な成果と共に、全員が最高に楽しむことができる環境であるのだ。","tags":["組織論","幸福論"],"title":"私が目指す、全員がリーダーの組織とは何か","type":"post"},{"authors":[],"categories":["主体性"],"content":"はじめに 私は、2020年の2月から8ヶ月間、株式会社Tech Designという会社でCTO(最高技術責任者)をしていました。 (役員ではなく、株式などは持たない業務委託契約なので、アルバイトみたいな感じですが。) うちの大学では、10月からは研究室に配属されることになっているので、そちらに専念しようと思います。\nCTOという立場を経験して、そこで得たもの、成し遂げたこと、感じたことをまとめます。 力を入れて書いた内容なので、多くの人の目に止まることを祈っています。\nCTOとしてどんなことをしたのか 最初に僕がこの会社に話を聞きに来た時は、会社では、ボランティアのマッチングプラットフォームを作っていました。 しかし、その事業はあまりうまくいかず、導入企業数は0でした。 また、プロダクトもSESの方が中心となっていて、社内のエンジニアにノウハウは一切残っていない状態でした。 創業から1年半頃でしたが、事業もチームもノウハウも肩書きも何一つない会社でした。 その会社の創業者と話をして、僕にはCTOとしてこの会社に入って、社内のチームをリードして、BCPに関連する新規プロダクトを構想し実装ほしいという話をされました。\nそして、そのBCP事業の立案のために、外資系大手コンサルティング企業でBCPを経験していた方を紹介していただき、本当に長い期間をかけて議論につきあっていただきました。\nその結果、僕は、BCPやサプライチェーンの管理をし、災害情報を収集する総合的な防災プラットフォームを構想し、実際のUXと機能要件に落とし込みました。\nビジネスモデルの構想や機能要件の定義だけでなく、経営戦略、開発戦略、採用戦略、営業戦略、チームの構築、主要OKRとKPIの選定、技術選定、サービス説明資料作成など、会社に関わることの全ての裁量をいただきました。\n当然今年は大学3年生で、本業の学業も忙しく、やらなければならないことが多すぎて目が回るような日々でした。 頑張りすぎて体調を崩したり、手を抜こうかと思ってしまうような時もありましたが、チームに支えられていたので、なんとか頑張れました。なんだかんだ毎月200~250時間程度は稼働していました笑。 モダンな技術や僕の思想が優秀な学生やエンジニアの方々に刺さったのか、採用は非常にうまくいき、すぐに10人まで人数は増えました。とても仲がよくて楽しい会社になりました。 「全力で楽しむけれど、緊張感を忘れない」という弊社の行動指針の一つは、僕ではなくメンバーの一人が言ってくれたものですが、本当にその通りの会社になりました。 僕が作ったというよりは、チームがそうしてくれた気がしています。\n結果的には、 Resilire のプロダクトをリリースし、小さいピボットなどもありながら事業を進めていくことができました。\n幸運にもチームメンバーの全員に(きっと)信頼していただいたので、全ての裁量をもって積極的に取り組むことができました。本当に楽しかったし、得るものも多かったです。 主体的に挑戦して成果を出す場として、最高のステージを用意してくださり、僕を信じてついてきてくれた、Tech Designのメンバーの全員に本当に感謝をしています。 本当に本当にありがとうございました。\nCTOとして目指した世界線 とにかく僕は、「人が成長する場所」にしたいと思っています。 これは、一般論としてそこに所属している人が成長しない企業は企業としても成長していくポテンシャルがないと考えられるからです。 特にTech Designの場合は、大学生が特に中心になっていました。何も知らなくてどんなことでも吸収できる年代が集まっているのだから、この会社を人生の分岐点になるようにしたい。 僕の価値観を共有して、大きく社会に貢献できるような人材になってほしい。そして僕もそうなれるような分岐点にしたいと思っています。\nまた、「人が成長する場所」といっても成長の観点というのは、たくさんあると思いますが、中でもエンジニアとしての「技術力」と、「主体性」の二つの観点にフォーカスしていました。\n技術力にフォーカスする理由 これは、主体性にも繋がる話なのですが、 技術力そのものが重要というよりも、「苦労して困難を乗り越えてでも達成したいと思える目標」を掲げ、それに向かって努力をして積み上げる。 そのプロセスが、人生を豊かにするのではないかと考えています。\nなので、エンジニアであれば、(LINE, mercari, DeNAなどの)メガベンチャーと呼ばれるようなIT企業に就職しても、その中で上位層に入っていけるような人材になることを目標とするのが妥当なのではないかと思っています。\nまた、僕を含めて大学生は数年後には大学を卒業します。その時には、新入社員として社会に出ることになります。 就職先で活躍できるくらいの実力が備えられていれば、本人だけでなく、IT業界全体の成長にもつながります。 そうすることで、業界全体の発展に寄与していただきたい。という想いもあります。\nその二つの観点から、僕は、「技術力」が成長させられる会社にしたいと思っていました。\n主体性にフォーカスする理由 主体性というのは、僕が生きてきて一番大切にしているテーマです。 Tech Designのメンバーなら耳にタコができるほどこの単語を聞いてきたと思います。\nこれは、 これまでやったことないことに全力で取り組むこと。 それだけが人生を豊かにするきっかけになり、これまでになかった理念と価値観を作り出す。 と考えているので、主体的に行動している時が一番幸せだからです。 また、会社にとっても言われたことをこなすのではなく、自分で仕事を生み出せる人が最も大きな成果をあげてくれることを僕は知っているからです。\nその細かい理由については、 https://riita10069.github.io/aboutme/post/first-post/ こちらの記事で語っているので、ぜひ読んでほしいです。\n人が成長するために重要なのは 意思決定の数 人が成長するために必要なのは、意思決定の数の多さです。 自分が心の底からこれがやりたいと感じたことに挑戦する。そのプロセスとそれによって得られた結果によって反省をする。それを繰り返すことで人は学習します。\n例えば、「この技術を導入した方がいいと思う」と提案したが、僕や他のメンバーから否定されてしまったらどうでしょうか。 その時点で、成長する機会を1つ失います。 それが続くとついには提案してもどうせ採用されないと思い、成長する機会が一切無くなります。\nそのために企業ができることは、全員に裁量権を与え、何事もメンバー自身が考えて決められる環境づくりです。 そのような環境のことを僕は全員がリーダーのチームと呼んでいます。\n僕が作ったのは、「全員がリーダー」のチーム よくある誤解として、「リーダーとは一つの組織に一人か二人いればいい」と思っている人がいます。 しかも、その人たちは、リーダー以外の人は自分の主張を強くしてはならず、リーダーにやれと言われたことをやればいいと思っています。そのほうがトラブルが起きないためにパフォーマンスが高いと考えている人もいます。\n僕がいつも言っている「仕事は人に与えられるものではなく、自分で生み出すもの」という価値観と全く逆です。 結論から述べると、組織に一人のリーダーがいるチームよりも、全員がリーダーのチームの方が圧倒的に高いパフォーマンスが出せます。\nまず、僕のいうリーダーというのは、「チームとして成果を出すこと」を「自分の意見が採択されること」よりも重視している人を指します。 その前提において、リーダーが何人いようと、人と人がぶつかって、トラブルになるなんてことはありません。\nまた、一人をリーダーにおくチームの場合は、 リーダー以外のフォロワー立場に立つと、(言われたことをこなすだけですので)チームとして成果を出すことを最優先事項にするのは難しく感じます。 成果を出すことに主眼が向いていても、個人としての成果を最大化することになるのではないでしょうか？ 現実問題、ほとんどのフォロワーは、ただ指示に従い、成果の責任は全てリーダーのものであると考えてしまいます。 そうすると、自分のモチベーションはなくなり、強いて言えば報酬を受け取ることになるのではないでしょうか？\nその結果、当然チームとしての成果は出なくなります。\n逆に、本題の「全員がリーダーのチーム」について考えます。 全員がリーダーのチームとはいえ、僕はCTOを担当していたわけで、役職上のリーダーがいないわけではありません。 役職上の責任者である僕は最終的な顧客体験に対して、全責任を追っています。 しかし、役職上の責任者とリーダシップというスキルは全く別のものです。 他のメンバーは役職がないからと言って、僕の指示を待ち、与えられた業務を遂行するというのとは大きく異なっています。\n僕たちは全員、自分の関わるプロジェクトについて必要な実装や仕様について把握していて、どのように分担し進めていくかについて積極的に話し合いをします。話し合いにおいても、自分が合意形成をリードするという意思があります。 話し合いで得られた結果だけにフォーカスする人はいません。\n僕がどれだけある機能の必要性について説明しても、チームメンバーはそれを採用するかしないかについて自ら考えます。 採用されないことも多々ありましたが、「なぜこの意見を取りいれなかったのか」について聞くことはありますが、その判断を批判したことは一度もありません。 僕は、どの技術や仕様を採用し、逆にどれを採用しないのか。それを一人一人のエンジニアが自分で考えて、動いて、意思決定することを求めました。\nチームメンバーが僕の言った通りに動くと思えば、自分の影響力を考えてからでないと発言できなくなります。先週リリースされたGCPの機能を使ったら？なんて気軽に言えなくなります。 チームのマネージャーであろうがが、 株主だろうが、どんなに偉い人がどんなに強く意見を言っても、それを指示とは受け取らない。あくまでも意見だと受け取る。 そういった文化を作ることに成功していました。 弊社の行動指針に、「配慮はするが遠慮はしない」というものがあります。これも、僕ではなくチームのメンバーから出たフレーズなのですが、メンバーからこのようなフレーズが出てくるということは、本当の意味で全員がリーダーのチームが作れていたのかなと思います。 少なくとも、役職上のリーダーである僕に対して遠慮をするメンバーはいなかったんじゃないかなって思います。\nまた、僕たちは誰にも指示されなくても、主体的に新しい技術を導入しようとします。 常に技術に対して高いアンテナを立てていて、先週リリースされたバージョンで追加された機能の実装を検討します。 全員がこういった主体的で成果を出すことに拘っている組織を作ることに成功したと思っています。\nどのようにして、全員がリーダーの組織を作ったか まず一つは、マイクロサービスアーキテクチャによる責任の分割があると思います。 サービスを細かくマイクロサービスに分割することで、自分の開発しているサービスに関与する人数が少なくなるので、そのサービスに対して一人一人が責任を持つようになりました。\n弊社の文化として、マイクロサービスに星の名前をつけていくのですが、自分の開発しているマイクロサービスについている星の名前に愛着が沸くってメンバーが言っていたのも、責任の分割に成功している証なんじゃないかなと思いました。 また、マイクロサービスにつける名前に関しても、出来るだけ僕ではなく、開発担当者が自分達自身で決めるように促していました。そのほうが、責任感とリーダーシップが生まれると考えたので。\nまた、技術領域に関しても、分断して、担当を割り振るようにすることで、技術に対してもリーダーシップを発揮して、積極的にキャッチアップ、布教活動を行なっている様子が伺えました。\nKubernetesのCustom Controllerオタクの〇〇君がいつも語っているとか、ジョブの運用したいから誰々に聞こう。自然言語処理のことは誰々に聞こう。 のような感じですね。\n他には、 全ての業務について、なんでそれをやるのか。どのような背景で、そのような経営的な意思決定をしたのかについて、PRDという自作の書式に従って、ドキュメントを徹底して書きました。 これによって、メンバーが全ての業務に理由を持っていて、自分の頭で考えて取り組むことができるような環境を作っていました。\nこの会社だけでなく、世界中の全ての会社がこのように全員がリーダーになれるような会社であって欲しい。 まさに、僕の願う世界中の人が主体的に挑戦することができる世界線にたった10人だけれど、なれていたと思っています。 そして、この記事を読んでくれた人が少しでもこういった価値観になって欲しいと思います。\n成長する人の特徴 繰り返しになりますが、成長する人の特徴の一番は主体的な人です。 具体的に言えば、\n 人に言われる前に自分から気になった技術をキャッチアップする人 調べろと言われる前に過去の事例を調べ新たな価値を提案できる人  そういった、仕事は人に与えられるものではなく、自分で生み出すものという価値観が定着している人は成長します。 これが一番重要なことです。\nそしてもう一つが現状に満足しないことです。 正直なことをいうと僕も一度だけ、自分よりも数億倍も実力のある技術者と話をしたときには、「一生追いつけない」なんて感じてしまったことがあります。 実際、メガベンチャーのサマーインターンシップの選考では無敗で、受託の案件では時給が1万円を超えるようなものもあるので、今のままでも、ある程度の大企業で働いたり高収入を得たりできるかもしれません。\nだけど、現状に満足したらそこからは一切成長しません。 僕が本当に成し遂げたいことはなんだったっけって考えるとまた熱が湧いてきます。 僕は、\n 最先端の技術を使って、これからの新しい時代を作りたい。 世界中の人が主体的に挑戦するような世の中にしたい。  ずっと掲げているこのこの二つの目標を達成できているだろうか。 まだまだ全く達成できていません。だからこんなところで絶対に足を止めてはいけない。 まずは、技術と知識で世界の最前線にいる人に相手にしてもらえるようにならないとなって思っています。 OSSのGitHub Issueで強そうな外国人が言ってることにビビってるうちはとりあえず全然ダメだろうなって思ってます笑\n少しでも「細々とやっていける」なんて考えが脳裏に浮かぶような人は、成長できません。細々やっていくのがせいぜいです。 なぜなら、細々やっていけることに満足した時点でそれ以上にはなりえないからです。\n目標に対する執着心が強くて、高みを目指し続けられる人。 そんな人が成長できる。常に現状に不満を言っていいるくらいの人の方がいいです。 どんなに売り上げを伸ばしている会社で、どれだけいい待遇を受けていても、現状に満足しない人。事業としても個人としても、もっと上を目指し続けられる人。 そんな人こそが、本当に成長する人、これからの時代を作っていく人なんじゃないかなって思っています。 そして、僕はどんな時も現状に満足することはありません！\nこれから 僕はヒューマンマネジメントとエンジニアリングの両方に興味があり、描きたいプロダクトの未来、作りたい会社の未来が手に取るように見える、ビジョナリーなCTOだと思っています。\nエンジニアリングに興味があると言いましたが、この夏、多くのメガベンチャーでインターンをして、当然ですが、僕の知見や経験ではまだまだ未熟な部分も多いと感じました。\nYahoo!と DeNAのサマーインターンでは、シード期のベンチャーでは要求されない技術レベルを要求されました。 プロダクトのユースケースが多すぎるため、Domainモデルがとても大きく、ビジネスロジックが複雑なため、複雑な条件分岐がservice層に溢れてきていました。いかに綺麗なプログラムを書けるかという観点では要求値が全然違いました。 また、スクラム開発の規模感も大きく変わり、求められるドキュメントの確度と情報量も全然違いました。 さらに、Yahoo!のKubernetes上では4000ものコンテナが動いているらしく、 僕は、ログとメトリクスの転送プラットフォームの作成を担当したのですが、トラフィックの量も秒間10億msgなど明らかに違う次元で、一つの変数のヒープ領域への書き込みが大問題になったり、worker poolの数の最適化のために何度も何度もベンチマークを取ったりというのは印象に残りました。\nYahoo!でPrivate Cloudの開発インターンに参加した時の僕のメンターの方はとても優しくて努力家でとても優秀なエンジニアでした。 僕が知らないことを優しくとてもたくさん教えてくれたので、とても楽しかったです。 このような場を体験して、僕はこの会社にいてはこれ以上成長できないし、 Tech Designにいたら最前線で活躍しているエンジニアに相手にされるようには絶対になれないと思いました。\nもちろん、SQLチューニング、パフォーマンス計測に始まって、スクラッチで低レイヤーシステムの実装をしたり、GCE上にKubernetesでサービスメッシュを使ったマイクロサービスを構築したりと技術への挑戦をするようにはしていました。 それでも、メガベンチャーに比べるとあまりにも不十分だったと思います。\nこれから、コンピュータサイエンスの勉強はもっと頑張らなければいけないし、Cloud Nativeは自分が最も興味のある分野なので、勉強していきたいと思っています。 特にコンテナのランタイムとセキュリティは英語の本でもなんとか読んで勉強していたつもりなのですが、mercariのインターン生には、ずっと詳しい方がいらっしゃって本当にもっと頑張らなければ、世界で戦えないと痛感しました。 OSSの公開やコントリビュート、CKA資格取得など、学生のうちにやりたいことは山ほどあります。 これからも自分に甘えないで、貪欲に積み重ねていきます。\nSpecial Thanks 繰り返しになりますが、株式会社Tech Designに携わった全ての方に心の底からの感謝を申し上げます。\nそして、Tech Designの開発メンバーのみんなへ、 池尻大橋のアパートに毎日泊まって、夢中で開発を続けた日々はきっと僕らの一生の宝物になると信じています。本当に楽しかったです。 それぞれ新天地が決まってきていますが、どんな会社や研究室に行っても、主体的に新しい技術のキャッチアップをして、リーダーシップを発揮し続けてほしいと願っています。\n","date":1601200357,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601200357,"objectID":"4f499e0cab6f7d7a0077722559a4742b","permalink":"https://riita10069.me/post/cto/","publishdate":"2020-09-27T18:52:37+09:00","relpermalink":"/post/cto/","section":"post","summary":"はじめに 私は、2020年の2月から8ヶ月間、株式会社Tech Designという会社でCTO(最高技術責任者)をしていました。 (役員ではなく、株式などは持たない業務委託契約なので、アルバイトみたいな感じですが。) うちの大学では、10月からは研究室に配属されることになっているので、そちらに専念しようと思います。\nCTOという立場を経験して、そこで得たもの、成し遂げたこと、感じたことをまとめます。 力を入れて書いた内容なので、多くの人の目に止まることを祈っています。\nCTOとしてどんなことをしたのか 最初に僕がこの会社に話を聞きに来た時は、会社では、ボランティアのマッチングプラットフォームを作っていました。 しかし、その事業はあまりうまくいかず、導入企業数は0でした。 また、プロダクトもSESの方が中心となっていて、社内のエンジニアにノウハウは一切残っていない状態でした。 創業から1年半頃でしたが、事業もチームもノウハウも肩書きも何一つない会社でした。 その会社の創業者と話をして、僕にはCTOとしてこの会社に入って、社内のチームをリードして、BCPに関連する新規プロダクトを構想し実装ほしいという話をされました。\nそして、そのBCP事業の立案のために、外資系大手コンサルティング企業でBCPを経験していた方を紹介していただき、本当に長い期間をかけて議論につきあっていただきました。\nその結果、僕は、BCPやサプライチェーンの管理をし、災害情報を収集する総合的な防災プラットフォームを構想し、実際のUXと機能要件に落とし込みました。\nビジネスモデルの構想や機能要件の定義だけでなく、経営戦略、開発戦略、採用戦略、営業戦略、チームの構築、主要OKRとKPIの選定、技術選定、サービス説明資料作成など、会社に関わることの全ての裁量をいただきました。\n当然今年は大学3年生で、本業の学業も忙しく、やらなければならないことが多すぎて目が回るような日々でした。 頑張りすぎて体調を崩したり、手を抜こうかと思ってしまうような時もありましたが、チームに支えられていたので、なんとか頑張れました。なんだかんだ毎月200~250時間程度は稼働していました笑。 モダンな技術や僕の思想が優秀な学生やエンジニアの方々に刺さったのか、採用は非常にうまくいき、すぐに10人まで人数は増えました。とても仲がよくて楽しい会社になりました。 「全力で楽しむけれど、緊張感を忘れない」という弊社の行動指針の一つは、僕ではなくメンバーの一人が言ってくれたものですが、本当にその通りの会社になりました。 僕が作ったというよりは、チームがそうしてくれた気がしています。\n結果的には、 Resilire のプロダクトをリリースし、小さいピボットなどもありながら事業を進めていくことができました。\n幸運にもチームメンバーの全員に(きっと)信頼していただいたので、全ての裁量をもって積極的に取り組むことができました。本当に楽しかったし、得るものも多かったです。 主体的に挑戦して成果を出す場として、最高のステージを用意してくださり、僕を信じてついてきてくれた、Tech Designのメンバーの全員に本当に感謝をしています。 本当に本当にありがとうございました。\nCTOとして目指した世界線 とにかく僕は、「人が成長する場所」にしたいと思っています。 これは、一般論としてそこに所属している人が成長しない企業は企業としても成長していくポテンシャルがないと考えられるからです。 特にTech Designの場合は、大学生が特に中心になっていました。何も知らなくてどんなことでも吸収できる年代が集まっているのだから、この会社を人生の分岐点になるようにしたい。 僕の価値観を共有して、大きく社会に貢献できるような人材になってほしい。そして僕もそうなれるような分岐点にしたいと思っています。\nまた、「人が成長する場所」といっても成長の観点というのは、たくさんあると思いますが、中でもエンジニアとしての「技術力」と、「主体性」の二つの観点にフォーカスしていました。\n技術力にフォーカスする理由 これは、主体性にも繋がる話なのですが、 技術力そのものが重要というよりも、「苦労して困難を乗り越えてでも達成したいと思える目標」を掲げ、それに向かって努力をして積み上げる。 そのプロセスが、人生を豊かにするのではないかと考えています。\nなので、エンジニアであれば、(LINE, mercari, DeNAなどの)メガベンチャーと呼ばれるようなIT企業に就職しても、その中で上位層に入っていけるような人材になることを目標とするのが妥当なのではないかと思っています。\nまた、僕を含めて大学生は数年後には大学を卒業します。その時には、新入社員として社会に出ることになります。 就職先で活躍できるくらいの実力が備えられていれば、本人だけでなく、IT業界全体の成長にもつながります。 そうすることで、業界全体の発展に寄与していただきたい。という想いもあります。\nその二つの観点から、僕は、「技術力」が成長させられる会社にしたいと思っていました。\n主体性にフォーカスする理由 主体性というのは、僕が生きてきて一番大切にしているテーマです。 Tech Designのメンバーなら耳にタコができるほどこの単語を聞いてきたと思います。\nこれは、 これまでやったことないことに全力で取り組むこと。 それだけが人生を豊かにするきっかけになり、これまでになかった理念と価値観を作り出す。 と考えているので、主体的に行動している時が一番幸せだからです。 また、会社にとっても言われたことをこなすのではなく、自分で仕事を生み出せる人が最も大きな成果をあげてくれることを僕は知っているからです。\nその細かい理由については、 https://riita10069.github.io/aboutme/post/first-post/ こちらの記事で語っているので、ぜひ読んでほしいです。\n人が成長するために重要なのは 意思決定の数 人が成長するために必要なのは、意思決定の数の多さです。 自分が心の底からこれがやりたいと感じたことに挑戦する。そのプロセスとそれによって得られた結果によって反省をする。それを繰り返すことで人は学習します。\n例えば、「この技術を導入した方がいいと思う」と提案したが、僕や他のメンバーから否定されてしまったらどうでしょうか。 その時点で、成長する機会を1つ失います。 それが続くとついには提案してもどうせ採用されないと思い、成長する機会が一切無くなります。\nそのために企業ができることは、全員に裁量権を与え、何事もメンバー自身が考えて決められる環境づくりです。 そのような環境のことを僕は全員がリーダーのチームと呼んでいます。\n僕が作ったのは、「全員がリーダー」のチーム よくある誤解として、「リーダーとは一つの組織に一人か二人いればいい」と思っている人がいます。 しかも、その人たちは、リーダー以外の人は自分の主張を強くしてはならず、リーダーにやれと言われたことをやればいいと思っています。そのほうがトラブルが起きないためにパフォーマンスが高いと考えている人もいます。","tags":["退職エントリ"],"title":"Tech Designという会社でCTOをした。","type":"post"},{"authors":["Ryota Yamada"],"categories":["データ基盤"],"content":"はじめに みなさんこんにちは。りいたです。 自分のブログ初の技術的な記事の投稿なので、それに相応しいような僕が初めて自力でやったプロジェクトについてお話しします。 ちなみに特に最強でもなんでもないので、ご容赦ください。 DWHを作っている他の会社さんの参考になったり、データ分析をしているけれど、DataOps的な考え方をこれから導入しようと考えている人の参考になればいいなと思って書いています。 プログラミング素人の大学生のいってることなので、間違ってることたくさんあると思うので、Qiitaの方で指摘していただけたらありがたいです。\nちょうど一年前くらいです。大学2年の4月から、株式会社Journeyという会社でデータサイエンティストを務めています。\nプレシリーズAくらいの小さな会社なのですが、この会社がやっているミニッツというサービスは、後払いの旅行サイトです。 後払いという特徴を持っているために、支払いが正しく済まされないお客さんがあとを立たないという課題を抱えていました。 そこで、機械学習を用いた不正検知を実装して、回収率を上げていくというプロジェクトの責任者として、この会社にジョインすることになりました。 そこで、当然必要になってくるのが、DataPlatformです。 と言っても、この会社に入った頃の僕はプログラミング初めて4ヶ月くらいだった上にデータを扱った経験が一切なかったために、何もわからず、調べたり、社内のエンジニアに教えてもらいながら進めていったので、道はすごく険しかったです笑\n前提 データ基盤の３分類 + 1    分類 役割 主なツール     DataLake 行動ログやDBのデータを分析用にとりあえず置いておくところ。データソース（水源）から流れてきたデータをそのまま蓄える場所なのでレイク（湖） BigQuery, BigTable   DataWareHouse 事業のドメインに従って、再集計、加工したもの。基本的にはドメインにつながりのあるテーブルをjoinしたり、時差の修正をしたり。意味のあるものである必要はない。分析しやすいことが大事 BigQuery, Dataproc   DataMart SQLやPythonになれていないBiz向けにデータを加工・整理したものですね。完成品を取り揃えていることからマート（市場）と呼ぶらしいです。ここでは、GUIで必要なデータが取り出せることが重要事項と考えています。 BigQuery, metabase, dataprep   FeatureTable 機械学習の特徴量はここに追加していきます。BigQueryMLやAutoMLへの活用もしやすく、jupyterでのデータ加工も楽になります。 BigQuery, csv, bigtable    今後この4つの単語が出てくるので、役割を一旦抑えてください。 実際は、FeatureTableを除いた三つの分け方を、データ基盤の３分類と呼ぶことが多いと思います。 いわゆるDataOpsという界隈では、ゆずたそさんの提唱する進化的データモデリングはすごく有名だと思います。 https://www.amazon.co.jp/exec/obidos/ASIN/B087R6P8NZ/yuzutas0-22/ データサイエンティストや機械学習エンジニアのかたは、こちらの書籍は1度目を通して置いてもいいと思います。\nそもそもData Lakeがなかった この会社には、機械学習のモデルを作ってくれと言われて入ったのですが、現状はAIどころの騒ぎではなかったです。 MySQLに入っているデータはともかく、行動ログなんてそもそも残っていなかったんです笑\nなので、まずは、DataLakeを作るところから始める必要があります。\nDataLakeを作る プロダクトそのものは、AWSのEC2で動いていたので、\n Amazon Glue Amazon EMR Amazon Athena Amazon RedShift  など、データレイクのためのプロダクトはAWSにも十分揃っていると思います。\nまぁ、結論から言うと、わざわざGCPに持っていって、BigQueryを採用しました。 これも先に結果をいってしまうと、AthenaよりもBigQueryの方がメリットが強かったかなと思っています。\nBigQueryの利点は、\n 安い。数十GBくらいなら無料枠でやっていける。 使ってる人が多いので、文献が多い。  SQLでの分析を前提とするならAthenaとかRedShiftよりは、BigQueryは高速なので、開発体験もいいかなと思います。 EMRとか使うってなると、高速に動作すると思いますが、SQLって普遍的なスキルで書きやすいので、好き好んで、Spark使わなくて持ってなっていた部分もあります。\n当時は微妙だったのですが、今では、BigQueryMLがある程度使えるようになってきたことと、AutoMLがかなり楽にグラフの描画などを含めてやってくれることを考えると、BigQueryの外側に出る必要がどんどんなくなってきていると思っています。 ちゃんとモデルをつくり込むときは、JupyterでPython使って書いていたので、Spark使うことあまりなかったです。(pandas-gbqでBigQuery上のFeatures Tableからデータを取ってきています。) DataLakeを直接食わせるわけではないので、なんとかなっていましたが、教師データがTB以上になった時にはSparkが必要になってくると思うので、その辺は、現場によってかなって思っています。\nBigQueryにとりあえず、入れると決めたので、設計ができました。\n行動ログ nginx -\u0026gt; fluentd -\u0026gt; stackdriver -\u0026gt;bigquery\nMySQLのデータ slaveでdumpを作成して、それをGCSにあげるバッチを作成(これをyebisと命名) これをBigQueryに入れる。 このバッチはdigdagを使って1日に一回動くようにした。\nなんでembulk使わないの？ dumpが吐ける程度のデータ量しかなかったからです。 embulkってGCS経由のプアグインありましたっけ？直接入れるよりその方が安いんですよね。\nなんでcomposer使わないの？ AWSとGCPのセキュアコネクトするのがしんどかったんですよ。 特にAuroraにアクセスする方はシビアなので。\nfrom fluentd to bigquery 取りたいログをaccess.logに出力するために、Loggerを作る必要があります。 弊社はRailsを使っていたので、デフォルトのLoggerを活用したほうが賢いので、モンキーパッチをあてました。\nmodule Server module Logger class Formatter \u0026lt; ::Logger::Formatter include ActiveSupport::TaggedLogging::Formatter  Goを使っている場合がほとんどだと思いますが、Goではモンキーパッチがあてられないので、echoとかの既存のLoggerを使って、っていうのは厳しいですね。 僕は、github.com/TV4/logrus-stackdriver-formatterとgithub.com/plutov/echo-logrusを使って実装したことがあります。\npackage middleware type ( Log struct { Logger *logrus.Logger } ) func (l *Logs)getLogs(c echo.Context, next echo.HandlerFunc) error { logFields := map[string]interface{}{ \u0026quot;time_rfc3339\u0026quot;: time.Now().Format(time.RFC3339), \u0026quot;remote_ip\u0026quot;: c.RealIP(), \u0026quot;host\u0026quot;: req.Host, \u0026quot;uri\u0026quot;: req.RequestURI, \u0026quot;method\u0026quot;: req.Method, \u0026quot;path\u0026quot;: p, \u0026quot;referer\u0026quot;: req.Referer(), \u0026quot;user_agent\u0026quot;: req.UserAgent(), \u0026quot;status\u0026quot;: res.Status, \u0026quot;latency\u0026quot;: strconv.FormatInt(stop.Sub(start).Nanoseconds()/1000, 10), \u0026quot;latency_human\u0026quot;: stop.Sub(start).String(), \u0026quot;bytes_in\u0026quot;: bytesIn, \u0026quot;bytes_out\u0026quot;: strconv.FormatInt(res.Size, 10), \u0026quot;claims\u0026quot;: claims, } l.Logger.WithFields(logFields).Info() }  的な感じの実装をしました。 https://github.com/plutov/echo-logrus/blob/master/middleware.go#L152 を参照すればだいたいこんな感じかなってできました。\nfrom mysql to bigquery (yebis) MySQLからデータ取ってきて、頑張ってCVS作って、S3に上げておいてください。 今度はそれを取ってきて、BigQueryに上げています。\nload_job = dataset.load_job(table_id, file_path, skip_leading: 1, schema: schema) load_job.wait_until_done!  こんな感じの関数があるので、意外と簡単にできます。\ndigdagが定期実行してくれます。\ntimezone: Asia/Tokyo schedule: daily\u0026gt;: 04:00:00 _export: slack_webhook_url: https://hooks.slack.com/services/******** slack_webhook_channel: \u0026quot;#general\u0026quot; +setup: sh\u0026gt;: bundle install +run: sh\u0026gt;: ruby main.rb  データ基盤の３分類を始める。 解決すべき課題（Issue to be Solved）  特徴量を増やすのが大変すぎる  地道にSQLを大量に書かないといけない 書いたからといって、精度があがるとは限らない   データベースが汚すぎる 現状、欲しいデータがいつでもすぐに管理できているとは言えない  依頼、レスポンスまでの時間がある程度ある 一度に大量の依頼をしても返せない GUIで分析できたらそれはそれで便利では(metabase, dataprep)   KPIの管理がイマイチ  SQLを書いたはいいけど、ビジネス視点でクリティカルじゃない Dashboardは正しくルールを決めて管理するべきなのでは   クエリ管理ができてない  書いたクエリの厳密な定義がもはや記憶にない 書いたクエリにどんなものがあったか覚えていない    分析というのが、アドホックな検証という役割だけでなく 行動や属性から、ユーザーをクラスタリングし、 それによってどのようなクラスの属性にどの施策が刺さったのかを考える 仮説構築の手助けができるようなものを目指してく方がいい。\nというのが、当時のPRDに僕が書いたものです。 簡潔に言えば、BigQueryから頑張って引っ張ってくればいいというフェーズに限界がきていたんです。\n 同じようなデータセットをなんども作り直すのが大変すぎる ちょっとしたKPIの要件変更に対して、全てのクエリを修正しないといけない  という2点です。 批判とかではないですが、少なくとも弊社のビジネスも強くはないので、余分にKPI作りすぎというのもありました。 見ている数字の数が多すぎるし、定義が頻繁に変わる。 定義の変更は本当に厄介で、200ものクエリを全部読んで、またちょこっと変更なんてことをしないといけなかったので、DataWareHouseにKPIに関わるような重要な定義は外だしにしてあげて、DataMart側はFROM句でそこを参照するような形にしておかないとやってられないというのは強くありました。 後々課題をあげますが、こういった課題を、実感していないとDataOpsは厳しいと思います。なので、普段からそのデータセットでSQLを書いているデータ分析者でないSREの人とかがComposer導入できるからといって、データ基盤まで導入しても形骸化してしまうと思います。 実際この中間テーブルの考え方は、200行のクエリを30行にするくらいの威力のあるものでしたので、正しく運用できれば、価値のあるものになると思います。 また、KPI定義の変更に対しても非常に強いです。DWHを変えれば自然にDataMartも変わりますので。\n先に設計どーん Cloud Composer (bluemoon) Airflowのマネージドサービスですが、BigQuery Operatorが用意されていて、データ基盤の３分類やるならこの組み合わせが一番楽なような気がします。\nTerraformでCloud Composerを立てています。 というのも、composerって1日1回しか動かないのに、ずっと起きてるとお金もったいので、朝以外は落としています。 その時にTerraformだと管理しやすかったので、Terraformを使っています。\nterraform { backend \u0026quot;gcs\u0026quot; { bucket = \u0026quot;bluemoon-tf-state\u0026quot; path = \u0026quot;composer.tfstate\u0026quot; credentials = \u0026quot;account.json\u0026quot; } } provider \u0026quot;google\u0026quot; { credentials = file(\u0026quot;account.json\u0026quot;) project = \u0026quot;minute-journey\u0026quot; region = \u0026quot;asia-northeast1\u0026quot; } resource \u0026quot;google_composer_environment\u0026quot; \u0026quot;composer-environment\u0026quot; { name = \u0026quot;cloud-composer\u0026quot; project = \u0026quot;minute-journey\u0026quot; region = \u0026quot;us-central1\u0026quot; # 当時はdataprocとかdataflowがasia対応してなかったので config { node_count = 3 node_config { zone = \u0026quot;us-central1-a\u0026quot; machine_type = \u0026quot;n1-standard-1\u0026quot; disk_size_gb = 20 } software_config { airflow_config_overrides = { core-dag_concurrency = 20 } } } }  ディレクトリ構成 . ├── tf... ├── data_source_a.py ├── data_source_b.py └── data_source_c.py └── sql ├── data_source_a.sql ├── data_source_b.sql └── data_source_c.sql  import datetime import codecs from airflow import models from airflow.contrib.operators import bigquery_operator from airflow.operators import bash_operator with codecs.open('/home/airflow/gcs/plugins/sql/data_source_a.sql', 'r', 'utf-8') as f: query = f.read() DAG_NAME = 'base_query' default_dag_args = { 'start_date': datetime.datetime(2018, 1, 1), 'email_on_failure': False, 'email_on_retry': False, 'retries': 1, 'retry_delay': datetime.timedelta(minutes=10), 'project_id': \u0026quot;minute-journey\u0026quot; } with models.DAG( dag_id=DAG_NAME, schedule_interval=\u0026quot;@daily\u0026quot;, default_args=default_dag_args) as dag: start = bash_operator.BashOperator( task_id='start', bash_command='echo Start Workflow' ) bq_to_bq = bigquery_operator.BigQueryOperator( task_id='query', write_disposition='WRITE_TRUNCATE', create_disposition='CREATE_IF_NEEDED', allow_large_results=True, sql=query, use_legacy_sql=False, destination_dataset_table='minute-journey.data_ware_house.data_source_a' ) start \u0026gt;\u0026gt; bq_to_bq  実行方法 gcloud composer environments storage dags import --location us-central1 --environment cloud-composer --source base_query.py gcloud composer environments storage plugins import --location us-central1 --environment cloud-composer --source sql/  定期実行 先ほども言いましたが、ずっと立ってると3台分時間課金されて勿体無いので、朝以外は落ちてるようにしています。 CircleCIのcron使って、午前8:45にterraform applyして、9:30にterraform destroyしています。 キューイングとかもできるような感じはありますが、キューイングされる先にお金かかるような気がして、やってないです。\nまぁ、やるとしたらCloud runにTerraform環境んで、composerのbash operatorでそれ叩くかなぁって感じですが、今の所30分はかからないってわかってるので、まぁいいかなってなっています笑\nデータ量が増えてきてできなくなったら手作業で10:00にしておけばいいかなと。。。w この規模の会社だとデータ基盤なんて1日古くても大した問題ではないので。\nversion: 2 jobs: create: working_directory: ~/bluemoon docker: - image: hashicorp/terraform:light steps: - checkout - run: name: Slack notification command: sh start_slack.sh working_directory: . - run: name: Init terraform command: terraform init working_directory: tf/cloud-composer - run: name: Apply terraform command: terraform apply -auto-approve working_directory: tf/cloud-composer destroy: working_directory: ~/bluemoon docker: - image: hashicorp/terraform:light steps: - checkout - run: name: Slack notification command: sh end_slack.sh working_directory: . - run: name: Init terraform command: terraform init working_directory: tf/cloud-composer - run: name: Destroy terraform command: terraform destroy -auto-approve working_directory: tf/cloud-composer deploy: working_directory: ~/bluemoon docker: - image: google/cloud-sdk steps: - checkout - run: name: initialize gcloud command: | gcloud auth activate-service-account --key-file=tf/cloud-composer/account.json gcloud --quiet config set project minute-journey - run: name: import sql files command: gcloud composer environments storage plugins import --location us-central1 --environment cloud-composer --source sql/ - run: name: import dag files command: gcloud composer environments storage dags import --location us-central1 --environment cloud-composer --source base_query.py workflows: version: 2 start_workflow: triggers: - schedule: cron: \u0026quot;45 23 * * *\u0026quot; filters: branches: only: - master jobs: - create - deploy: requires: - create filters: branches: only: master end_workflow: triggers: - schedule: cron: \u0026quot;30 0 * * *\u0026quot; filters: branches: only: - master jobs: - destroy  MLOps (hinano) 不正かどうかの確率を計算して返すAPIはhinanoと読んでいます。 GCSからモデルのpickleファイルを取ってきて、APIコールで特徴量をもらってそれを計算して返すって感じです。\ndef load_model(): project_name = \u0026quot;minute-journey\u0026quot; storage_client = storage.Client(project_name) bucket_name = 'hinano' bucket = storage_client.get_bucket(bucket_name) #アップロードしたファイルをダウンロード blob_download = bucket.get_blob('xgb_reservation_model.pickle') loaded_model = pickle.loads(blob_download.download_as_string()) return loaded_model def score_predict(clf, reservation_log): y_pred_proba = clf.predict_proba(reservation_log) y_pred = clf.predict(reservation_log) return y_pred[0], y_pred_proba[0][0]  APIにはFlask使っています。 結構作るの時間かかりましたが、正直大したことはやっていないです。 Service層にあるのがこれくらいなので、この辺参考にすれば簡単にできるはずです。\nDWHの運用で出てきた問題点 DataLakeからDataMartを直接作ることを厳しく禁止しすぎた。 DataWareHouseが肥大化しすぎてドキュメント管理がしんどくなってきた。 同じようなDataWareHouseができてきて、結局最初の課題に戻ってしまう。 データモデリングに関しては、他の分野ほど知見が溜まっていないのもあって、ある程度リファクタリング前提で考えていいと思っています。 というのも、Atomic DesignやDDDのような強力な型があれば乗っかってもいいですが、現状この分野にはそれがないと思うので、 頻繁にジョインするテーブルがわかったらそれをくっつけて、サブクエリを全て置き換えるというような運用をしてもいいと思います。 僕らの運用だと1Lake1Houseが多すぎたので、それは本質的ではないと思います。\n謎のDWH データの定義って難しいですよね。 それってuniqueなの？こういうパターンは別で数えるの？それって本質なの？週別なの？土曜から日曜にかけて宿泊した人はどっち扱いなの？ 定義しなきゃいけないことって思っていることの何倍も多いです。 そういう曖昧な定義を許していると、なんとなく書いたクエリがそうだったからでDWHに曖昧の負債が溜まっていきます。 本質的なプロダクトの改善に役立てることを考えるなら、データの定義を厳密にすることが重要だと思います。厳密な定義のデータが欲しくなるくらいには、そもそも仮説が練りこまれていないと分析する価値がないとも言えますし、データの定義を考えることは有意義だと思います。\n僕は、ディメンショナルモデリング的な考え方にはあまり共感していないというか、そこまでの規模のプロダクトではなかったのかもしれないですが、データの定義に関しては、厳密なものを作り込んでおく必要があるので、ある程度、ファクトとディメンションを分離して、スタースキーマを作成したりすることで、精査されるかもしれません。 ただ、重要なのはいつでも本質から外れないことです。\n","date":1599330458,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599330458,"objectID":"9032063289fcf5648aa8725d2ede564b","permalink":"https://riita10069.me/post/data-ops/","publishdate":"2020-09-06T03:27:38+09:00","relpermalink":"/post/data-ops/","section":"post","summary":"はじめに みなさんこんにちは。りいたです。 自分のブログ初の技術的な記事の投稿なので、それに相応しいような僕が初めて自力でやったプロジェクトについてお話しします。 ちなみに特に最強でもなんでもないので、ご容赦ください。 DWHを作っている他の会社さんの参考になったり、データ分析をしているけれど、DataOps的な考え方をこれから導入しようと考えている人の参考になればいいなと思って書いています。 プログラミング素人の大学生のいってることなので、間違ってることたくさんあると思うので、Qiitaの方で指摘していただけたらありがたいです。\nちょうど一年前くらいです。大学2年の4月から、株式会社Journeyという会社でデータサイエンティストを務めています。\nプレシリーズAくらいの小さな会社なのですが、この会社がやっているミニッツというサービスは、後払いの旅行サイトです。 後払いという特徴を持っているために、支払いが正しく済まされないお客さんがあとを立たないという課題を抱えていました。 そこで、機械学習を用いた不正検知を実装して、回収率を上げていくというプロジェクトの責任者として、この会社にジョインすることになりました。 そこで、当然必要になってくるのが、DataPlatformです。 と言っても、この会社に入った頃の僕はプログラミング初めて4ヶ月くらいだった上にデータを扱った経験が一切なかったために、何もわからず、調べたり、社内のエンジニアに教えてもらいながら進めていったので、道はすごく険しかったです笑\n前提 データ基盤の３分類 + 1    分類 役割 主なツール     DataLake 行動ログやDBのデータを分析用にとりあえず置いておくところ。データソース（水源）から流れてきたデータをそのまま蓄える場所なのでレイク（湖） BigQuery, BigTable   DataWareHouse 事業のドメインに従って、再集計、加工したもの。基本的にはドメインにつながりのあるテーブルをjoinしたり、時差の修正をしたり。意味のあるものである必要はない。分析しやすいことが大事 BigQuery, Dataproc   DataMart SQLやPythonになれていないBiz向けにデータを加工・整理したものですね。完成品を取り揃えていることからマート（市場）と呼ぶらしいです。ここでは、GUIで必要なデータが取り出せることが重要事項と考えています。 BigQuery, metabase, dataprep   FeatureTable 機械学習の特徴量はここに追加していきます。BigQueryMLやAutoMLへの活用もしやすく、jupyterでのデータ加工も楽になります。 BigQuery, csv, bigtable    今後この4つの単語が出てくるので、役割を一旦抑えてください。 実際は、FeatureTableを除いた三つの分け方を、データ基盤の３分類と呼ぶことが多いと思います。 いわゆるDataOpsという界隈では、ゆずたそさんの提唱する進化的データモデリングはすごく有名だと思います。 https://www.amazon.co.jp/exec/obidos/ASIN/B087R6P8NZ/yuzutas0-22/ データサイエンティストや機械学習エンジニアのかたは、こちらの書籍は1度目を通して置いてもいいと思います。\nそもそもData Lakeがなかった この会社には、機械学習のモデルを作ってくれと言われて入ったのですが、現状はAIどころの騒ぎではなかったです。 MySQLに入っているデータはともかく、行動ログなんてそもそも残っていなかったんです笑\nなので、まずは、DataLakeを作るところから始める必要があります。\nDataLakeを作る プロダクトそのものは、AWSのEC2で動いていたので、\n Amazon Glue Amazon EMR Amazon Athena Amazon RedShift  など、データレイクのためのプロダクトはAWSにも十分揃っていると思います。","tags":["DataOps","DWH"],"title":"【DataOps】大学2年生の時に作った最強のDataPlatform","type":"post"},{"authors":["Ryota Yamada"],"categories":["幸福論"],"content":"死ぬために生きること、幸せに生きること あなたは幸せに生きたい。何か面白いことをして生きていたいと思ったことはありますか？\nぼくは、大学に入学するまでは、たったの一度も思ったことなかったんですけど、大学に入学してからはそれをすごく強く思うようになりました。 幸せに生きるってなんだろう。何をしている時が幸せなんだろうといろいろ考えました。 ぼくの親や友達は、\n  「安定していて食いっぱぐれがない」\n  「一生楽して稼げる」\n  「高い給料が欲しい」 とかそんなことばかり言っています。 でも、\n  お金持ちって幸せかな？\n  大企業のエリートは幸せかな？\n  楽して稼げることが幸せかな？\n  って不思議に思いました。皆さんはそう思いません？ みんなはなんでそんなにも安定を好むのか。 寿命を全うすることが目的みたいになっていて、まさに**「死ぬために生きている」**という状態なのかなと思いました。\n「幸せに生きること」と「死ぬために生きること」というのは全く別だと思うんです。 幸せに生きるために大切なことってなんだと思いますか？ ぼくは、なんで大学に入ってから、幸せに生きたいって思うようになったんだと思いますか？\n幸せな人生にする上で大切なことは 「苦労しても乗り越えたいと感じられる目標を持つこと」です。\nぼくは大学に入学して、なんで幸せになりたいと思うようになったかというと、大学入学前と大学入学後の人生を比較して、入学後の人生っていい人生じゃなかったんです。 良い人生じゃないというのは、**「困難に挑戦していない」**ということです。\nなぜかというと、 ぼくは、東京工業大学という、日本の工学部で2番目くらいの偏差値の大学に通っています。 世間的に言われる「高学歴」というやつです。 それは何を表すかというと、 ぼくの中で「想像可能な人生」に一気に変わってしまったんです。\n大変だけど、年に8回ある定期試験の勉強をして、なんだかんだ単位は取って。 院試の勉強もぼちぼちやれば、大学院にも進めて、研究室の推薦使って就職して、まぁまぁの大企業に入って。 30くらいになったらちょうどその時に付き合っていた女性と多分結婚するんだろうな。 大企業のサラリーマンになれば、毎日誰にでもできるような作業しかしない。 作業すればお金もらえるから別に忙しかったとしても、淡々と作業を進めることが想像できるんですよ。これからこうなるだろうな。って。 それでは、生きてる意味を見出せてないというか。\nだけどぼくはその本質に気が付けないで、「幸せに生きたいな〜」って思うようになったんだと思います。 高校生までのぼくは、どうも負けず嫌いがすぎて、部活もゲームも勉強も気が狂ったみたいに努力していたので、辛いと思うことはあっても、つまらないと感じたことはなかったんですけどね。 大学に入ってからは、こういうわけで毎日が物足りないと感じるようになりました。\nでも、プログラミングに全力で取り組み始めてからは、また日々がめっちゃ楽しくなりました。 「これまでやったことないことに全力で取り組むこと。」によって、これから起こることが予測できなくなるので、めっちゃくちゃ楽しくてワクワクするんです。 でも、人って予測できない未来をなぜか毛嫌いするんですよ。 先生とか親とか、周りの友達は、 「そういうのはやめろ」 「一番大切なのは、真面目に生きること」 みたいなことばかり言ってきます。 でも、ぼくが責任を持って断言します。 それは大きな間違いで、困難に挑戦することを習慣化した方が幸せなのです。 少し厳しいことをいうようですが、 世の中で「真面目」と言われる人は、親や先生に言われたことを言われた通りにやります。 親や先生にとっては、自分の言うことをよく聞いてくれるからとても褒めます。 それに、言われたことを言われた通りにやるのって楽なんですよ。無駄な摩擦を生まないし、自分で考えなくていいし、何より親や先生に褒められますからね。 でも、言われたことを言われた通りにやる「真面目人間」というのは、(自分ではない)誰かの作った答えを「ただなぞってる」だけなのです。 でも、自分の価値観を持たず他人の価値観で生きているから一生幸せになれないんです。 そもそも自分の信念すら存在しないのです。 難しくて自分にはできないなと思ったとしても、とにかく自分がやりたいと感じたことをやる。 もう「真面目人間」はやめましょう。 もう他人に認められるための人生はやめましょう。 人に褒められるための行動もやめましょう。 あなたの感じたその感性で、達成したいと思った目標のために行動しましょう。\nそして、僕たちは非常に幸運な時代に生まれました。 僕らは閉塞した時代に生まれた運の悪い子どもたちではありません。 自由の時代です。自己実現の時代です。 近年のテクノロジーの進化によって、不可能は可能になります。 今まさに、これまでの古臭い手段がクリエイティブで画期的な仕組みに置き換わっている真っ最中です。 親や先生のせいにして、何もせずに、世界が変わってゆくのを指をくわえて見ているだけになるか、 それともあなたが世界を変える側になるか。 さぁ、どっちを選びますか？\nぼくはみなさんに必ずしもプログラミングをやれって言ってるわけではないです。 本当になんでもいいんです。ゲームでも、仕事でも、部活動でも。 ただ、これまでやったことないことに「全力で」取り組んでください。 困難に挑戦して、リスクを背負ってください。 まじで毎日ワクワクできます。その瞬間から幸せに生きれます。 まだここにない未来を見つけてください。 そうすれば、 **「多大な苦労を伴ってもそこに到達してみたい」**という風に心から感じられる目標がきっとみつかります。 これが最も人間を動かす大きな力になります。 このように感じられる目標を持った瞬間にあなたの人生は成功します。 それが人間の感じる本当の幸せです。\n(とはいえ、周りの雑音を気のしないのって難しいので、コツを教えます。 安定した大企業に就職しろとか、楽して稼げるようになれとか、ぼくも親に強く強く言われています。 でも、「安定」とか、「楽して稼ぐ」とか、そういった発想って器が小さいなぁと思いません？ この人は、稼いだ金の額で評価されいんだ。小さい人だなぁ。 「ぼくは楽することにも、稼ぐことにも興味がない。」と心の中で思っておけば他人の雑音なんて全く気にならなくなります。決して反抗してはダメです。価値観の問題なので。)\n何か新しいことに全力で取り組む 「困難に挑戦する」いうのは、ちょっと言葉は大げさですが本当に些細なことからでいいんです。 要するに「これまでやったことないことは気になったらなんでもやってみる。」 ってことなんです。 そのなかから、本当に全力で取り組みたいものを決めればいいんです。\n例えば、\n 今日話したちょっとかわいいなって思った女の子(かっこいいなって思った男の子)に勇気を持って、「今日はありがとう」ってラインを送ること 好きな人をご飯に誘ってみること 不安だけれど、海外に一人で短期留学に行ってみること 何か新しいコミュニティに入ること 値段は高いけど気になっていたお店に入ってみること。 プログラミングを始めること 身の丈に合わない難関大学を目指してみること  こんなことでいいんです。 始めるときはほんの些細なことでいいんです。その中から全力でやるものが決まるんです。\nこれまでだったら、「勇気を持てなくてやらないな」と思うことをちょっと視点を変えてみて、今日からはやってみる。 ほんの些細なことであっても、それだけで、格段に人生は豊かになります。\nもちろん、それだけではありません。 仕事の場でも、いろいろなことが困難に挑戦することとしてあげられます。 その中の１つに 「これまでの先輩方がやってきたオペレーションを一新して新しいことに取り組む」ということも含まれると思います。 常々ぼくは、「言われたことをしっかりやると人生うまくいく」というのは大きな間違えだと言っています。 本当に会社にとって大きな利益を生み出すのは、 「これまでなかった仕事を0から生み出すこと」 「誰も取り組まなかった課題に取り組むこと」 だと思っているからです。 だから、「現状に課題を感じて、これまでやっていなかったことをやる」というのは、最高の成果を提供する手段です。\nしかし、これまであったものを否定して新しいことを始めると、 それがどんなに素晴らしいことであっても必ず非難されます。必要ないといわれます。 これまであったものを否定することは、そのようなオペレーションを組んでいた先輩方を否定することになりますから。 当然、新しいことを始めるには自分一人では何もできません。 周りの人の協力がとにかく1番大切です。 だから、周りを巻き込んで行動していく行動力と主体性が本当に重要です。 そして、その時に大切なのは、**「なんでそれをやるのか」**について繰り返し丁寧に説明することです。\nぼくは、文化祭の実行委員会で、\n TIPS in Pocket という参加団体が工大祭の当日に必要な情報がA3両面にまとまったとても便利な資料を、発案から作成までやりきりました。 これまで、模擬店企画の参加申請を紙面で行なっていましたが、ぼくが完全フォーム化を実現しました。  この時もそうでした。 何か新しいことを始めようとすれば、必ず非難されます。ぼくがこの２つのことを始めた時も非常に多くの人に非難されました。 時には人格否定もされましたし、反省では長文での攻撃も受けました。それでもぼくは、これによって誰のどんな課題が解決するのかについて語り続けました。ぼくの作りたいビジョンを伝えました。その結果、手のひらを返したように多くの人が協力してくれました。 この文化祭の実行委員会の活動で気づきました。 チームにおいて大切なことは、「Why」を語ること。 その仕事の価値がわかれば、お金が動かなくても全力で協力してくれる人がいます。 そして、ぼく一人では何もできないけれど、多くのステークホルダーが協力すれば、ずっと不可能と言われてきたことが可能になると。 これは、ぼくがきっかけで、これまでの価値観を覆し、これからの常識を作り出した例です。 この文化祭の実行委員会での経験は一生忘れないぼくの思い出です。\n結局、「これまでやったことないことに全力で取り組むこと」は幸せになるためのきっかけを提供してくれているんです。\n ぼくは文化祭の実行委員会で当時二年生局長という役職で活躍していたひとつ上の先輩に憧れて全力で文化祭の改善に取り組みました。 高校の友達に負けたくないから、全力で受験勉強をはじめました。  これらがきっかけで、ぼくの人生は激変しました。とても豊かになりました。 きっかけは本当になんでもいいんです。 ただ、何かを本気でやることが大事なんです。\nあなたにとってのそれは、受験勉強かもしれないし恋愛かもしれないし仕事かもしれません。 ただ何かに本気で打ち込むこと。挑戦する姿勢であり続けることが、一生の生き甲斐を見つけるきっかけになります。 これまでの価値観が大きく変わるきっかけになります。 少なくとも僕はこのように、文化祭の実行委員会に所属して人生が大きく変わりました。今の僕の価値観を作ってくれたのは間違いなく工大祭実行委員会での活動です。\n身の丈に合わないような難関大学を目指して毎日勉強していた日々はとても充実していました。 知らなかったことを知ること。友達と切磋琢磨して得点を競うこと。毎日、放課後に仲のいい友達と一緒に今日の授業の復習をして、演習問題を解くこと。 一つの目標に向かって積み重ねた高校生活は本当に最高の青春でした。 そして、最高の高校で最高の友達に囲まれたからこその今があると思っています。\n僕は、まだ20歳でこれから先の人生のことについて、わからないことだらけです。 今ここに書いた理念が変わる日がすぐに来るかもしれません。 むしろ、自分の理念や価値観が変わることを楽しんで生きていきたいと思っています。 そして、是非みなさんも何かこれまでやったことのないことに全力で取り組んで欲しいと願っています。\n最後までお読みいただきありがとうございました。 これからもどうか応援してください。 そして、最後にもう一度言わせてください。\nこれまでやったことないことに全力で取り組むこと。 それだけが人生を豊かにするきっかけになり、これまでになかった理念と価値観を作り出す。\n","date":1597657161,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597657161,"objectID":"2891ef7ac669613ed704a6ee4440ca95","permalink":"https://riita10069.me/post/first-post/","publishdate":"2020-08-17T18:39:21+09:00","relpermalink":"/post/first-post/","section":"post","summary":"どんなことに取り組む場合でも、主体的な姿勢であることが最も大切","tags":["幸福論"],"title":"主体的な姿勢であることは幸せであること","type":"post"}]