<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Authors | Riita</title>
    <link>https://riita10069.github.io/aboutme/authors/</link>
      <atom:link href="https://riita10069.github.io/aboutme/authors/index.xml" rel="self" type="application/rss+xml" />
    <description>Authors</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>riita10069@gmail.com</copyright><lastBuildDate>Sun, 06 Sep 2020 03:27:38 +0900</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Authors</title>
      <link>https://riita10069.github.io/aboutme/authors/</link>
    </image>
    
    <item>
      <title></title>
      <link>https://riita10069.github.io/aboutme/authors/admin/</link>
      <pubDate>Sun, 06 Sep 2020 03:27:38 +0900</pubDate>
      <guid>https://riita10069.github.io/aboutme/authors/admin/</guid>
      <description>&lt;p&gt;東工大情報通信系B3&lt;br&gt;
株式会社エブリーでReactとgolangを用いた開発と、新規事業MAMADAYSのメディア事業の立ち上げを担当した。株式会社Journeyでは分析チームを立ち上げ、MLモデル、MLOpsとDWH構築。またKPIダッシュボードの作成と企画立案分析など。&lt;br&gt;
株式会社TechDesignでは経営メンバー(CTO)として、2020年2月にジョイン。&lt;br&gt;
今の価値観を取り壊し、これからの常識に変えていく。&lt;br&gt;
そして、ITを用いて世界中の人々の暮らしを豊かにする。&lt;/p&gt;
&lt;p&gt;Ryota is a third-student of Tokyo Institute of Technology and major in computer science.&lt;br&gt;
I like Computer Science and Business Intelligence.&lt;br&gt;
And Ryota Yamada is a Chief Technology Officer at Tech Design Inc.,&lt;/p&gt;
&lt;p&gt;Previously, he improved essential problem solving and &amp;lsquo;create machine learning applications&amp;rsquo; at Journey Inc.,&lt;br&gt;
learned &amp;lsquo;web programming&amp;rsquo; with golang and react.js at every inc. internship&lt;br&gt;
He is highly skilled with problem solving, management strategy and GCP.&lt;/p&gt;
&lt;p&gt;He wants to enrich human life with technology and bussiness.&lt;/p&gt;
&lt;p&gt;これまでの開発経験を列挙する。&lt;br&gt;
I have the following skills.&lt;/p&gt;
&lt;h3 id=&#34;skills&#34;&gt;Skills&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Web&lt;/em&gt;&lt;br&gt;
React, golang(echo), Ruby(Rails)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Infra&lt;/em&gt;&lt;br&gt;
GCE(Ansible), GKE(Knative, Istio, kustomize), CloudRun, nginx(sidecar), micro service&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Database&lt;/em&gt;&lt;br&gt;
MySQL, BigQuery, Redis, Datastore&lt;/li&gt;
&lt;li&gt;&lt;em&gt;DevOps&lt;/em&gt;&lt;br&gt;
circleCI, cloud build, Terraform, Ansible&lt;/li&gt;
&lt;li&gt;&lt;em&gt;MLOps&lt;/em&gt;&lt;br&gt;
jupyter, papermill, cloud compsoer, DWH, flask(pandas-gbq), Dataproc&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Collect Data&lt;/em&gt;&lt;br&gt;
fluentd, stackdriver, Pub/Sub, Dataflow(streaming), BigQuery&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Data processing&lt;/em&gt;&lt;br&gt;
SQL, pandas, spark(python), feature-tool(python)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;MLModel&lt;/em&gt;&lt;br&gt;
scikit-learn, xg-boost, AutoML, BigQueryML, Spark(MLlib)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Business&lt;/em&gt;&lt;br&gt;
Manager, MRD, PRD, Resourceful, SEO, GDN, KPI, OKR&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;philosophy&#34;&gt;Philosophy&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://riita10069.github.io/aboutme/post/first-post/&#34;&gt;主体的な姿勢であること&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/riita10069/items/065ee0b5e32fdc10b22c&#34;&gt;成果を出すために取り組んでいること&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;extra-activities&#34;&gt;Extra Activities&lt;/h3&gt;
&lt;h4 id=&#34;publish-oss&#34;&gt;publish OSS&lt;/h4&gt;
&lt;h5 id=&#34;a-hrefhttpsgithubcomriita10069cynthiacynthiaa&#34;&gt;&lt;a href=&#34;https://github.com/riita10069/cynthia&#34;&gt;cynthia&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;made by &lt;strong&gt;golang&lt;/strong&gt;.&lt;br&gt;
Cynthia ensures test-driven development.&lt;br&gt;
When you use it in CI, it ensures that untested methods are not introduced.&lt;br&gt;
The reason for this is that Cynthia alerts you to a function that has no tests.&lt;br&gt;
テストのない関数を警告してくれます。CIやreviewdogに組み込むことでTDDを徹底できます。\&lt;/p&gt;
&lt;h5 id=&#34;a-hrefhttpsgithubcomriita10069check_interfacecheck_interfacea&#34;&gt;&lt;a href=&#34;https://github.com/riita10069/check_interface&#34;&gt;check_interface&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;made by &lt;strong&gt;golang&lt;/strong&gt;.&lt;br&gt;
check_interface warns against interfaces that are not implemented.&lt;br&gt;
Interfaces that are not implemented in any method are the cause of the nill pointer exception.&lt;br&gt;
どのメソッドにも実装されていないインターフェイスに警告を出します。&lt;br&gt;
それによって起こる実行時エラーを防ぎます。\&lt;/p&gt;
&lt;h5 id=&#34;a-hrefhttpsgithubcomriita10069mozukumozukua&#34;&gt;&lt;a href=&#34;https://github.com/riita10069/mozuku&#34;&gt;mozuku&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;made by &lt;strong&gt;golang&lt;/strong&gt;.
Mozuku returns a thesaurus of the received words. Mozuku is an OSS for natural language processing.
It is useful when you want to compensate for similar words and notational distortions.
受け取った単語の類似語やひらがな表記などを返してくれる自然言語処理のためのシソーラスOSSです。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
